{"version":3,"sources":["index.js"],"names":["proxy","baseEndpointProduct","baseEndpointCategories","tableRows","document","querySelector","prodTable","itemDetail","backBtn","results","loader","getProducts","res","fetch","data","json","getCategories","displayCategory","classList","remove","add","displayProducts","categoryData","products","categoryIds","map","item","id","productCategoryIds","printCatHeading","forEach","categories","el","includes","push","name","h2","createElement","innerHTML","join","insertAdjacentElement","html","sku","showProduct","e","target","parseInt","slice","x","filter","price","description","insertAdjacentHTML","backToList","addEventListener"],"mappings":";AAAA,MAAMA,EAAS,uCAETC,EAAsB,4DACtBC,EAAyB,8DACzBC,EAAYC,SAASC,cAAc,gBACnCC,EAAYF,SAASC,cAAc,yBACnCE,EAAaH,SAASC,cAAc,gBACpCG,EAAUJ,SAASC,cAAc,aACjCI,EAAUL,SAASC,cAAc,YACjCK,EAASN,SAASC,cAAc,gBAGhCM,EAAc,UACVC,MAAAA,QAAYC,SAASb,IAAQC,KAE5Ba,aADYF,EAAIG,QAIrBC,EAAgB,UACZJ,MAAAA,QAAYC,SAASb,IAAQE,KAE5BY,aADYF,EAAIG,QAKrBE,EAAkB,UACpBP,EAAOQ,UAAUC,OAAO,QACxBV,EAAQS,UAAUE,IAAI,QAEtBC,IAEMC,MAAAA,QAAqBN,IACrBO,QAAiBZ,IACjBa,EAAcF,EAAaR,KAAKW,IAAIC,GAAQA,EAAKC,IACnDC,IAAAA,EAAoB,GACpBC,EAAkB,GAEtBN,EAAST,KAAKgB,QAAQJ,GAAQA,EAAKK,WAAWD,QAAQE,IAAQR,EAAYS,SAASD,IAAOJ,EAAmBM,KAAKF,KAClHV,EAAaR,KAAKgB,QAAQJ,IAAUE,EAAmBK,SAASP,EAAKC,KAAQE,EAAgBK,KAAKR,EAAKS,OACvGN,EAAgBJ,IAAIC,MAASA,EAAKS,QAM9BC,IAAAA,EAAKhC,SAASiC,cAAc,MAChCD,EAAGE,UAAYT,EAAgBU,KAAK,OACpC9B,EAAQ+B,sBAAsB,aAAcJ,GAE5C1B,EAAOQ,UAAUE,IAAI,QACrBX,EAAQS,UAAUC,OAAO,SAIvBE,EAAkB,UACdE,MAGAkB,SAHiB9B,KAGDG,KAAKW,IAAIC,mBACXA,EAAKC,OAAOD,EAAKC,mCAClBD,EAAKC,OAAOD,EAAKS,qCACjBT,EAAKC,cAAcD,EAAKgB,cAI3CvC,EAAUmC,UAAYG,EAAKF,KAAK,KAK9BI,EAAc,MAAA,IAChBjC,EAAOQ,UAAUC,OAAO,QACxBV,EAAQS,UAAUE,IAAI,QAElBO,IAAAA,EAAKiB,EAAEC,OACXlB,EAAKmB,SAASnB,EAAGT,UAAU,GAAG6B,MAAM,IAEhCC,IAAAA,QAAUrC,IAGR8B,MAAAA,GAFNO,EAAIA,EAAElC,KAAKmC,OAAOvB,GAAQA,EAAKC,KAAOA,IAEvBF,IAAIC,4BACUA,EAAKS,qCACdT,EAAKK,mCACXL,EAAKgB,8BACHhB,EAAKwB,sCACCxB,EAAKyB,0BAI3B5C,EAAW6C,mBAAmB,YAAaX,EAAKF,KAAK,KACrDhC,EAAWW,UAAUC,OAAO,QAC5BT,EAAOQ,UAAUE,IAAI,SAGnBiC,EAAa,KACf5C,EAAQS,UAAUC,OAAO,QACzBZ,EAAWW,UAAUE,IAAI,SACxBb,EAAWF,cAAc,UAAYE,EAAWF,cAAc,SAASc,UAG5EF,IAEAX,EAAUgD,iBAAiB,QAASX,GACpCnC,EAAQ8C,iBAAiB,QAASD","file":"adore-beauty-techtest.779d94c8.js","sourceRoot":"..","sourcesContent":["const proxy = `https://cors-anywhere.herokuapp.com/`;\n//visit proxy first to activate access to server\nconst baseEndpointProduct = 'https://adorebeauty.com.au/api/ecommerce/catalog/products';\nconst baseEndpointCategories = 'https://adorebeauty.com.au/api/ecommerce/catalog/categories';\nconst tableRows = document.querySelector('.table.t-row');\nconst prodTable = document.querySelector('.product-table .t-row');\nconst itemDetail = document.querySelector('.item-detail');\nconst backBtn = document.querySelector('.back-btn')\nconst results = document.querySelector('.results');\nconst loader = document.querySelector('.lds-spinner');\n\n\nconst getProducts = async () => {\n    const res = await fetch(`${proxy}${baseEndpointProduct}`);\n    const data = await res.json();\n    return data;\n};\n\nconst getCategories = async () => {\n    const res = await fetch(`${proxy}${baseEndpointCategories}`);\n    const data = await res.json();\n    return data;\n};\n\n\nconst displayCategory = async () => {\n    loader.classList.remove('hide');\n    results.classList.add('hide');\n\n    displayProducts();\n    \n    const categoryData = await getCategories();\n    const products = await getProducts();\n    const categoryIds = categoryData.data.map(item => item.id);\n    let productCategoryIds =[];\n    let printCatHeading = [];\n\n    products.data.forEach(item => item.categories.forEach(el => !(categoryIds.includes(el))|| productCategoryIds.push(el)));\n    categoryData.data.forEach(item => !(productCategoryIds.includes(item.id)) || printCatHeading.push(item.name))\n    printCatHeading.map(item=>`${item.name}`);\n    \n    //not sure if getting the correct categories for the heading\n    //to do: for the heading, check against all categories not just first 50\n    //extra: use cat names for filtering display\n\n    let h2 = document.createElement('h2');\n    h2.innerHTML = printCatHeading.join(' | ');\n    results.insertAdjacentElement('afterbegin', h2);\n\n    loader.classList.add('hide');\n    results.classList.remove('hide');\n};\n\n\nconst displayProducts = async () => {\n    const products = await getProducts();\n    // const callCategories = await getCategories();\n\n    const html = products.data.map(item =>\n        `<div class=\"_${item.id}\">${item.id} </div>\n        <div class=\"_${item.id}\">${item.name} </div>\n        <div class=\"_${item.id} right \">${item.sku} </div>`\n    );\n    //to do: pagination\n\n    tableRows.innerHTML = html.join('');\n}\n\n\n\nconst showProduct = async (e) => {\n    loader.classList.remove('hide');\n    results.classList.add('hide');\n\n    let id = e.target;\n    id = parseInt(id.classList[0].slice(1));\n\n    let x = await getProducts();\n    x = x.data.filter(item => item.id === id);\n\n    const html = x.map(item =>\n        `<div class=\"data\"><h3>${item.name} </h3>\n        <p>Categories ${item.categories}</p>\n        <p>SKU: ${item.sku}</p>\n        <p>PRICE: ${item.price}</p>\n        <p>Description: ${item.description}</p> </div>`\n    );\n    //to do: map category list names against ${item.categories} is just showing category numbers for now\n\n    itemDetail.insertAdjacentHTML('beforeend', html.join(''));\n    itemDetail.classList.remove('hide');\n    loader.classList.add('hide');\n};\n\nconst backToList = () =>{\n    results.classList.remove('hide');\n    itemDetail.classList.add('hide');\n    !itemDetail.querySelector('.data') || itemDetail.querySelector('.data').remove()\n};\n\ndisplayCategory();\n\nprodTable.addEventListener('click', showProduct);\nbackBtn.addEventListener('click', backToList);"]}